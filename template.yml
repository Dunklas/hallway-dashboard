AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Hallway Dashboard
  Showing public transport departures and weather

Parameters:
  S3ArtifactBucket:
    Type: String
    Description: S3 bucket where lambda artifacts are stored
  DarkSkyApiKey:
    Type: String
    Description: API Key for Dark Sky
  TrafiklabApiKey:
    Type: String
    Description: API Key for Trafiklab
  PublicTransportStop:
    Type: String
    Description: Stop id to show departures for
  PublicTransportDirection:
    Type: String
    Description: Optional stop id to narrow down departures on a given direction
Resources:
  DashboardLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${DashboardStorageBucket}'
              - !Sub 'arn:aws:s3:::${DashboardStorageBucket}/*'
  DashboardLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt DashboardLambdaRole.Arn
      Code:
        S3Bucket:
          Ref: S3ArtifactBucket
        S3Key: S3-KEY-SET-IN-PIPELINE
      Handler: doesnt.matter
      Runtime: provided
      Timeout: 10
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref DashboardStorageBucket
          DARK_SKY_API_KEY: !Ref DarkSkyApiKey
          TRAFIKLAB_API_KEY: !Ref TrafiklabApiKey
          PUBLIC_TRANSPORT_STOP: !Ref PublicTransportStop
          PUBLIC_TRANSPORT_DIRECTION: !Ref PublicTransportDirection
  DashboardStorageBucket:
    Type: AWS::S3::Bucket
  DashboardLambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Id: DashboardLambdaScheduler
          Arn: !GetAtt DashboardLambda.Arn
  InvokeDashboardLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DashboardLambdaEventRule.Arn
  ReadUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: !Sub 'Read-${DashboardStorageBucket}'
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
              - !Sub 'arn:aws:s3:::${DashboardStorageBucket}'
              - !Sub 'arn:aws:s3:::${DashboardStorageBucket}/*'
  ReadUserCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ReadUser
Outputs:
  ReadUserAccessKeyId:
    Description: 'S3 Read Access Key'
    Value: !Ref ReadUserCredentials
  ReadUserAccessKeySecret:
    Description: 'S3 Read Secret Key'
    Value: !GetAtt ReadUserCredentials.SecretAccessKey
  StorageBucketName:
    Description: 'Name of storage bucket'
    Value: !Ref DashboardStorageBucket
